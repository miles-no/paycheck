datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// We want the following roles:
// - Admin - can see and manage all users-timesheets
// - Manager - can see and manage users-timesheets that are assigned to them. Currently this is the same as admin, but in the future we might want to have managers that can only see timesheets of their own employees
// - Employee - can see their own timesheets
// 
// Note. the roles have to be enforced in the code, not in the database
model Role {
  id    String @id @default(cuid())
  name  String @unique
  users User[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// The EmployeeDetails model is used to store information about the employee that is not stored in the xledger database.
model EmployeeDetails {
  id String @id @default(cuid())

  xledgerId           String? @unique // xledgerId is the databaseId of the user in xledger. Used for access control - so that only users with the correct xledgerId can access the data
  provisionPercentage Float?  @default(0.0) // The percentage of the provision that the user gets, for the amount over the self-cost
  selfCostFactor      Float?  @default(1.5) // The factor that is used to calculate the self-cost of a timesheet

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User[]
}

model User {
  id String @id @default(cuid()) // The id of the user in our database

  googleId String @unique // The id of the user in google. Used for authentication
  name     String // The name of the user
  email    String @unique // The email of the user
  picture  String // The picture of the user

  roleId String // The role of the user (admin, manager, employee)
  role   Role   @relation(fields: [roleId], references: [id])

  employeeDetailsId String? // The id of the employeeDetails of the user
  employeeDetails   EmployeeDetails? @relation(fields: [employeeDetailsId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
